version: "3.8"

networks:
  local:
    name: local
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.10.0.0/16
          gateway: 172.10.0.1

services:
  elasticsearch:
    platform: linux/amd64
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: local-elasticsearch-${ES_VERSION}
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    networks:
      - local

  kibana:
    platform: linux/amd64
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    container_name: local-kibana-${KIBANA_VERSION}
    environment:
      - ELASTICSEARCH_HOSTS=${ES_HOST}
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ES_PASSWORD}
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      - local

  postgresql:
    platform: linux/amd64
    image: postgres:${POSTGRES_VERSION}
    container_name: local-postgres-${POSTGRES_VERSION}
    hostname: postgresql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - local

  mongo:
    platform: linux/amd64
    image: mongo:${MONGO_VERSION}
    container_name: local-mongo-${MONGO_VERSION}
    hostname: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
    ports:
      - "${MONGO_HOST_PORT}:27017"
    networks:
      - local
    tty: true

  rabbitmq:
    platform: linux/amd64
    image: rabbitmq:${RABBITMQ_VERSION}
    container_name: local-rabbitmq-${RABBITMQ_VERSION}
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq/mnesia
    ports:
      - "${RABBITMQ_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HOST_PORT}:15672"
    networks:
      - local
    tty: true

  redis:
    platform: linux/amd64
    image: redis:${REDIS_VERSION}
    container_name: local-redis-${REDIS_VERSION}
    hostname: redis
    entrypoint: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/redis/data:/data
    ports:
      - "${REDIS_HOST_PORT}:6379"
    networks:
      - local
    tty: true

  jenkin:
    platform: linux/amd64
    image: jenkins:${JENKINS_VERSION}
    container_name: local-jenkin-${JENKINS_VERSION}
    hostname: jenkin
    volumes:
      - ${DATA_PATH_HOST}/jenkin/data:/var/jenkins_home
    ports:
      - "${JENKINS_PORT}:8080"

  dynamodb:
    platform: linux/amd64
    image: amazon/dynamodb-local:${DYNAMODB_VERSION}
    container_name: local-dynamodb-${DYNAMODB_VERSION}
    hostname: dynamodb
    command: "-jar DynamoDBLocal.jar -sharedDb"
    ports:
      - ${DYNAMODB_PORT}:8000
    volumes:
      - ${DATA_PATH_HOST}/dynamodb:/data
    networks:
      - local
    tty: true

  mysql-5.7:
    platform: linux/amd64
    image: mysql:5.7
    container_name: local-mysql-5.7
    hostname: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ./mysql/init-script.sql:/docker-entrypoint-initdb.d/init-script.sql
    ports:
      - ${MYSQL_PORT}:3306
    networks:
      - local
